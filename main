#include <Adafruit_MotorShield.h>
#include "ultrasensor.h"
#include "counterfunction.h"

#define MAX_RANG (520)//the max measurement value of the module is 520cm(a little bit longerthan effective max range)
#define ADC_SOLUTION (1023.0)//ADC accuracy of Arduino UNO is 10bit

bool linetrack = false;
int buttonPin = 5;
int motorspeed=150; //0-255       
int t = 0;  //time taken in the junction
float sensity_t;


void setup() {
  // put your setup code here, to run once:
  if (!AFMS.begin()) {         // create with the default frequency 1.6KHz
  // if (!AFMS.begin(1000)) {  // OR with a different frequency, say 1KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }
  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Setup");
  pinMode(buttonPin, INPUT); 
  pinMode(sl,INPUT);
  pinMode(sr,INPUT);
  myservo.attach(ServoPin); // attaches the servo on pin 9 to the servo object
  LeftMotor->setSpeed(motorspeed);
  RightMotor->setSpeed(motorspeed);
  int val = digitalRead(buttonPin); // read input value
  digitalWrite(led_red, LOW); //Turn off led
  digitalWrite(led_blue, LOW); //Turn off led
  digitalWrite(led_green, LOW); //Turn off led
  distancesensor_setup();
}

void loop() {
  // put your main code here, to run repeatedly
  blue_led_flashing();
  int val = digitalRead(buttonPin); // read input value
  LeftMotor->setSpeed(150);
  RightMotor->setSpeed(150);
  if (val==HIGH){
    Serial.print("ON");
    initialise();
    Serial.println("RUN");
  }
 
  while (linetrack==1){
    linetracking();
    outersensor_detection();
    } 
}

//UNIVERSAL FUNCTION


//STARTING FUNCTION
void initialise(){    //move forward for 2 seconds, out of box
  Serial.println("INITIALISE");
  LeftMotor->setSpeed(200);
  LeftMotor->run(FORWARD);
  RightMotor->setSpeed(200);
  RightMotor->run(FORWARD);
  delay(3000);
  linetrack = true;
}


void outersensor_detection(){    //whenever outer sensor detects a line, function will can and see if and where the robot is and perform the turns, also depends on block detection
   if (counter==0 && (svvl==HIGH || svvr == HIGH))    //each counterfunction is one junction
  {
    Serial.println(svvl);
    counterfunction();
    }

  else if (counter==1 && (svvr == HIGH|| svvl == HIGH))
  {
    counterfunction();
    }

  else if (counter==2 && svr == LOW && svl == LOW){
    counterfunction();
  }

  else if (counter==3 && ((SOFT==true && (svvl==HIGH || svvr == HIGH)) || (SOFT==false && svvl==HIGH))){  //everytime it reaches a junction, a counter function may or maynot call depends on the requirements
    counterfunction();
  }

  else if (counter==4 && (svvl==HIGH || svvr == HIGH)){
    counterfunction();
  }

  else if (counter==5 && ((SOFT==true && svvr==HIGH) || (SOFT==false && svvl==HIGH)) )
  {
    counterfunction();
    }

  else if (counter==6 && svr == LOW && svl == LOW ){
    counterfunction();
  }

  else if (counter==7 && ((SOFT==true && svvl==HIGH) || (SOFT==false && svvr==HIGH))){
    counterfunction();
  }

  else if (counter==8 && (svvl==HIGH && svvr==HIGH)){   
    counterfunction();
  }

  else if (counter==9 && ((SOFT==true && svvr==HIGH) || (SOFT==false && svvl==HIGH))){   
    counterfunction();
  }

  else if (counter==10 && (svvl==HIGH || svvr == HIGH)){
    counterfunction();
  }

  else if (counter==11 && (svvl==HIGH || svvr == HIGH)){
    counterfunction();
  }

  else if (counter==12 && (svvl==HIGH || svvr == HIGH)){
    counterfunction();
  }

  else if (counter==13 && (svvl==HIGH)){
  counterfunction();
  }

  else if (counter==14 && (svvr==HIGH)){
  counterfunction();
  }


}

void blue_led_flashing(){
  digitalWrite(led_blue, LOW); //Turn on led_blue
  delay(100);
  digitalWrite(led_blue, HIGH); //Turn off led_blue
  delay(100);

}




  
