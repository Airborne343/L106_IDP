#include <Adafruit_MotorShield.h>
#include "motorfunctions.h"
#define MAX_RANG (520)//the max measurement value of the module is 520cm(a little bit longerthan effective max range)
#define ADC_SOLUTION (1023.0)//ADC accuracy of Arduino UNO is 10bit

int sensityPin = A0; // select the input pin

bool linetrack = false;
bool SOFT = false;
int buttonPin = 4;
int ledPin=13;
int motorspeed=150; //0-255       
int counter = 0; //count the numbers of turn
int t = 0;  //time taken in the junction
float sensity_t;
float dist_t;

void setup() {
  // put your setup code here, to run once:
  if (!AFMS.begin()) {         // create with the default frequency 1.6KHz
  // if (!AFMS.begin(1000)) {  // OR with a different frequency, say 1KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }
  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Setup");
  pinMode(buttonPin, INPUT); 
  pinMode(sl,INPUT);
  pinMode(sr,INPUT);
  LeftMotor->setSpeed(motorspeed);
  RightMotor->setSpeed(motorspeed);
  delay(5000);
  int val = digitalRead(buttonPin); // read input value
  myservo.attach(ServoPin); // attaches the servo on pin 9 to the servo object
}

void loop() {
  // put your main code here, to run repeatedly
  int val = digitalRead(buttonPin); // read input value
  LeftMotor->setSpeed(150);
  RightMotor->setSpeed(150);
  if (val==HIGH){
    Serial.print("ON");
    initialise();
    Serial.println("RUN");
  }
 
  while (linetrack==1){
    linetracking();
    }
  
}

//UNIVERSAL FUNCTION


//STARTING FUNCTION
void initialise(){
  //move forward for 2 seconds
  Serial.println("INITIALISE");
  LeftMotor->setSpeed(150);
  LeftMotor->run(FORWARD);
  RightMotor->setSpeed(150);
  RightMotor->run(FORWARD);
  delay(500);
  linetrack = true;
  //need to add a release here? myMotor->run(RELEASE);
}


//TIME DELAY FUNCTION
void time_delay(){
  unsigned long previousMillis = 0; //store time for second event
  const long interval = 1000; //interval for second event
  unsigned long currentMillis = millis(); //conditional that checks whether 2 seconds have passed since last event
  if (currentMillis - previousMillis >= interval) {
    previousMillis = millis();
    //execute a piece of code, every *2 seconds*
   }
}


//LINETRACKING FUNCTION
void linetracking(){
 svl=digitalRead(sl);
 svr=digitalRead(sr);
 svvr=digitalRead(ssr);
 svvl=digitalRead(ssl);
   
  if(svl==LOW && svr==LOW)
  {
  //backward(); 
  //delay(tdelay);
  }


  else if (svvl==HIGH || svvr == HIGH)
  {
    counterfunction();
    }
  
  else if(svl==HIGH   && svr==LOW)
  {
  left(); 
  }
  else if(svl==LOW && svr==HIGH)
   { 
  right(); 
  }
  else if(svl==HIGH && svr==HIGH)
   {
  forward();
  }
}


//CONTERFUNCTION
void counterfunction(){
  Serial.println(counter);
  if (counter == 0)
  {
    forward();
    delay(200);
    left90();
    counter ++;
    forward();
    delay(200);
  }
  else if (counter == 1)   //Moving into the junction
  {
    forward();
    delay(300);
    right90();
    forward();
    delay(3000);
    while(t <= 3000){      // Do linetracking for 3 seconds
      linetracking();
      t++;
    }
    ultrasensor(); //Sensing and detecting the block
    svvl = LOW;
    svvr = LOW;
    while(svvl == LOW && svvr == LOW){
      backwardlinetracking();
      svvr=digitalRead(ssr);
      svvl=digitalRead(ssl);
    }
    counter ++;
  }

  else if (counter == 2)   // Moving into red zone to put the first block
    {
      if (SOFT == true) {
      left90();
    }
    else {
      right90();
    }
    counter ++;
    }

  else if (counter == 3) //moving into green zone to put the first block
  {
    if (SOFT == true) {
      left90();
      forward();
      delay(1000);
      release();
    }
    else {
      right90();
      forward();
      delay(1000);
      release();
    }
    counter ++;

    //blablabla
  }
}

void ultrasensor() {
 // read the value from the sensor:
sensity_t = analogRead(sensityPin);
dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;//

if(1<dist_t && dist_t< 6)
  {
    Serial.println("metal");
    Serial.println(dist_t);
    SOFT = false;
    counter ++; //metal block detect so go to green 
    delay(500);
  }
else if (6 <dist_t && dist_t < 11)   
    {
    Serial.println("foam");
    Serial.println(dist_t);
    SOFT = true;
    counter += 2; //foam block detect so go to red
    delay(500);
    }
else {
  delay(500);
}
delay(500);
}
